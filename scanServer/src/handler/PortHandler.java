package handler;

import dao.DataDAO;
import timer.TimerManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import utils.CRC16Util;
import utils.ExceptionUtils;
import utils.Lock;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by vaf71 on 2017/5/9.
 */
public class PortHandler {
    private Map<String, String> tempA = new HashMap<>();//存放上一条扫描数据
    private Map<String, String> tempB = new HashMap<>();//存放拆分数据的合并内容以及消息有效性
    
    //记录ID
    private static List<Integer> receiveIDs = new ArrayList<Integer>();
    public static List<Integer> getReceiveIDs() {
		return receiveIDs;
	}

	DataDAO dataDAO = new DataDAO();
    final Logger logger = LoggerFactory.getLogger("SCAN");

    {
        tempA.put("value", "0#0#0#0#0$0");
        tempB.put("value", "");
        tempB.put("isValid", "true");//标记该数据有没有漏扫
    }

    /**
     * 拆包
     */
    public void depacketize(String str){
        str = str.replaceAll("\n","");
        String[] packs = str.split("&");
        for (String pack : packs) {
            save2DB(pack);
        }
    }

    public void save2DB(String str) {
        try {
            String[] splitAll = str.split("\\$");
            String head = splitAll[0];//消息头
            String body = splitAll[1];//报文
            String[] splitHead = head.split("#");
            int msgId = Integer.parseInt(splitHead[1]);//消息id
            String isAll = splitHead[2];//是否是整条数据，0-否；1-是
            String isLast = splitHead[3];//是否是最后一部分数据，0-否；1-是
            int splitId = Integer.parseInt(splitHead[4]);//拆分id
            String crc = splitHead[5];

            String strA = tempA.get("value");//上一条数据
            int msgIdA = Integer.parseInt(strA.split("\\$")[0].split("#")[1]);//消息id
            int splitIdA = Integer.parseInt(strA.split("\\$")[0].split("#")[4]);//拆分id

            if (!str.equals(strA)) {//和上一条数据不相同才处理，相同就是重读，直接不处理
            	
                logger.info("扫码器收到数据:{}", str);
                if (!isAll.equals("1")) {//是拆分的某部分数据
                    logger.debug("该报文是第{}条消息拆分的第{}部分: {}", msgId, splitId, body);
                    
                    if(!crc.equals(CRC16Util.getCrc(body))){
                    	tempB.put("isValid", "false");
                    }

                    tempA.put("value", str);//保存到A，记录本条数据用来和下一条数据比对消息头，确定漏读、重读、是否是最后一条等

                    if (msgId != msgIdA) {//如果消息id不相同，就是一条新的数据，要重置 B 和拆分 id
                        tempB.put("value", "");//清空B
                        splitIdA = 0;//拆分id从0计数
                    }

                    if ((splitId - splitIdA) != 1) {//拆分id不递增就代表漏扫
                        tempB.put("isValid", "lou");//标记这条数据作废
                        logger.info("漏扫了!!!");
                    }

                    tempB.put("value", tempB.get("value") + body);//把拆分的这部分数据追加到B临时存起来
                    logger.info("该部分已暂存");
                    if (isLast.equals("1")) {//如果这部分数据是拆分的最后一部分，就要存数据库
                        logger.debug("是最后一部分");
                        if (tempB.get("isValid").equals("true")) {//判断这条数据有没有漏扫
                        	
                        	//将ID加入集合
                        	receiveIDs.add(msgId);
                        	
                            dataDAO.insertData(msgId, "data", head + "$" + tempB.get("value"), 0);
                            logger.info("已将合并后的报文存入数据库", head + "$" + tempB.get("value"));
                            
                        } else if (tempB.get("isValid").equals("false")) {
                        	
                        	//将ID加入集合
                        	receiveIDs.add(msgId);
                        	
                        	dataDAO.insertData(msgId, "data", head + "$" + tempB.get("value"), 1);
                            logger.info("该消息为crc校验失败消息，已将其存库", head + "$" + tempB.get("value"));
                        } else {
                        	logger.info("该条消息有漏扫，作废");
                            tempB.put("isValid", "true");
                        }
                        //若轮询数据库线程暂停了，则唤醒之
                        notifyPoll();
                    }
                } else {//是整条数据
                	
                	//进行crc校验
                	if(crc.equals(CRC16Util.getCrc(body))){
                		
                		//将ID加入集合
                    	receiveIDs.add(msgId);
                		
                		System.out.println("Crc校验成功");
                		logger.debug("该报文是整条消息");
                        tempA.put("value", str);//保存到A
                        dataDAO.insertData(msgId, "data", str, 0);
                        logger.info("该报文已存入数据库:{}", str);
                	}else{
                		
                		//将ID加入集合
                    	receiveIDs.add(msgId);
                		
                		System.out.println("Crc校验失败");
                        tempA.put("value", str);//保存到A
                        dataDAO.insertData(msgId, "data", str, 1);
                        logger.info("该报文已存入数据库:{}", str);
                	}
                	
//                    logger.debug("该报文是整条消息");
//                    tempA.put("value", str);//保存到A
//                    dataDAO.insertData("data", str);
//                    logger.info("该报文已存入数据库:{}", str);
                    //若轮询数据库线程暂停了，则唤醒之
                    notifyPoll();
                }
            } else {
                logger.debug("重读");
            }
        }catch (Exception e){
            logger.error(ExceptionUtils.getTrace(e));
        }
    }

    public void notifyPoll(){
        //若轮询数据库线程暂停了，则唤醒之
        if (!Lock.isRun) {
            Lock.isRun = true;
            synchronized (Lock.lock) {
                Lock.lock.notify();
            }
        }
    }
    
//    public static void main(String[] args) {
//    	String str = "2020#2#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str1 = "2020#4#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str2 = "2020#5#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str3 = "2020#6#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	
//    	PortHandler portHandler = new PortHandler();
//    	portHandler.save2DB(str);
//    	portHandler.save2DB(str1);
//    	portHandler.save2DB(str2);
//    	portHandler.save2DB(str3);
//    	
//    	
//    	String[] str6 = new String[]{
//    			"2020#10#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
//    			"2020#10#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
//    			"2020#10#0#0#2#0000$0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400dc00000000000000000000000000bb000000000000000000000000000000000000003800000000000000000000000000000000000000000000273000000000000000000000000000000000000000000000034400",
//    			"2020#10#0#1#3#0000$00000000000000000000000000000000000000000002bf000000000000000000000000000000000000000001f501f400000000000000000000000000002a29"
//    	}; 
//    	for (int i = 0; i <= 3; i++) {
//    		portHandler.save2DB(str6[i]);
//		}
//    			
//    	TimerManager timerManager = new TimerManager();
//    	
//    	try {
//			Thread.sleep(1000 * 60 * 2);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//    	
//    	String str5 = "2020#1#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	portHandler.save2DB(str5);
//    	
//    	try {
//			Thread.sleep(1000 * 60 * 2);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//    	
//    	String str7 = "2020#3#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str8 = "2020#7#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	portHandler.save2DB(str7);
//    	portHandler.save2DB(str8);
//    	
//    	try {
//			Thread.sleep(1000 * 60 * 4);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//    	
//    	String str11 = "2020#11#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str12 = "2020#12#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str13 = "2020#13#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	String str14 = "2020#14#1#0#0#0613$26110115e41106131000118d3c000002083d00010001000000010000000102000000000000000c4e0000000000000202d2006e000002e400fc0014f6074b00d31589008300000247000000000000018700278d0000000000000007f70000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8c";
//    	portHandler.save2DB(str11);
//    	portHandler.save2DB(str12);
//    	portHandler.save2DB(str13);
//    	portHandler.save2DB(str14);
//    	
//    	String[] str15 = new String[]{
//    			"2020#15#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
//    			"2020#15#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
//    			"2020#15#0#0#2#0000$0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400dc00000000000000000000000000bb000000000000000000000000000000000000003800000000000000000000000000000000000000000000273000000000000000000000000000000000000000000000034400",
//    			"2020#15#0#1#3#0000$00000000000000000000000000000000000000000002bf000000000000000000000000000000000000000001f501f400000000000000000000000000002a29"
//    	}; 
//    	for (int i = 0; i <= 3; i++) {
//    		portHandler.save2DB(str15[i]);
//		}
//    	
////    	String[] str = new String[]{
////    			"2020#14471#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
////    			"2020#14471#0#0#1#0613$262101038e110613173a0b01c20001c350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
////    			"2020#14471#0#0#2#0000$0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400dc00000000000000000000000000bb000000000000000000000000000000000000003800000000000000000000000000000000000000000000273000000000000000000000000000000000000000000000034400",
////    			"2020#14471#0#1#3#0000$00000000000000000000000000000000000000000002bf000000000000000000000000000000000000000001f501f400000000000000000000000000002a29"
////    	}; 
////    	for (int i = 0; i <= 3; i++) {
////    		portHandler.save2DB(str[i]);
////		}
//	}
}
